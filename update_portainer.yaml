---
- name: Update and Recreate Docker Containers from Inventory
  hosts: all
  become: true
  # The playbook expects all variables (container and email)
  # to be defined in your inventory file for each host or group.

  tasks:
    - name: "Update container with error handling and notifications"
      block:
        - name: "Ensure required container variables are defined"
          ansible.builtin.assert:
            that:
              - container_name is defined
              - image_name is defined
              - image_tag is defined
            fail_msg: "Please define container_name, image_name, and image_tag in your inventory file for {{ inventory_hostname }}."

        - name: "Ensure required email variables are defined"
          ansible.builtin.assert:
            that:
              - var_gmail_smtp_server is defined
              - var_gmail_smtp_port is defined
              - var_gmail_sender is defined
              - var_gmail_password is defined
              - var_gmail_receiver is defined
            fail_msg: "Please define all 'var_gmail_*' variables in your inventory file."
          run_once: true # Check this only once per run

        # --- GATHER INITIAL STATE ---
        - name: "1. Get running container's info to find its image ID"
          community.docker.docker_container_info:
            name: "{{ container_name }}"
          register: container_info

        - name: "2. Save the current image ID for comparison later"
          ansible.builtin.set_fact:
            current_image_id: "{{ container_info.container.Image }}"
          when: container_info.exists

        # --- PULL LATEST IMAGE AND GET ITS INFO ---
        - name: "3. Pull the latest image from the registry"
          community.docker.docker_image:
            name: "{{ image_name }}:{{ image_tag }}"
            source: pull
            force_source: true # Ensures Ansible checks the remote registry for a newer version.
          register: image_pull_result

        - name: "4. Get info of the newly pulled image"
          community.docker.docker_image_info:
            name: "{{ image_name }}:{{ image_tag }}"
          register: latest_image_info

        - name: "5. Save the latest image ID for comparison"
          ansible.builtin.set_fact:
            latest_image_id: "{{ latest_image_info.images[0].Id }}"
          when: latest_image_info.images | length > 0

        # --- COMPARE AND DECIDE ---
        - name: "6. Check if the container's image ID differs from the latest image ID"
          ansible.builtin.set_fact:
            update_available: "{{ current_image_id != latest_image_id }}"
          when: container_info.exists and latest_image_id is defined

        # --- CONDITIONALLY UPDATE CONTAINER ---
        - name: "Update container because a new image is available or container is missing"
          block:
            - name: "Stop, remove, and recreate container on local servers (Port Mapping)"
              community.docker.docker_container:
                name: "{{ container_name }}"
                image: "{{ image_name }}:{{ image_tag }}"
                state: started
                recreate: yes
                pull: true
                restart_policy: always
                ports:
                  - "9000:9000"
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock
                  - "{{ container_data_volume }}:/data"
              when: inventory_hostname in groups['localservers']
              register: container_update_result_local

            - name: "Stop, remove, and recreate container on external servers (Host Network)"
              community.docker.docker_container:
                name: "{{ container_name }}"
                image: "{{ image_name }}:{{ image_tag }}"
                state: started
                recreate: yes
                pull: true
                restart_policy: always
                network_mode: host
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock
                  - "{{ container_data_volume }}:/data"
              when: inventory_hostname in groups['externalservers']
              register: container_update_result_external

            - name: "Send update success e-mail"
              ansible.builtin.mail:
                host: "{{ var_gmail_smtp_server }}"
                port: "{{ var_gmail_smtp_port }}"
                username: "{{ var_gmail_sender }}"
                password: "{{ var_gmail_password }}"
                to: "{{ var_gmail_receiver }}"
                subject: "Portainer Docker container '{{ container_name }}' updated on {{ inventory_hostname }}"
                body: "The Ansible playbook successfully updated the '{{ container_name }}' container on {{ inventory_hostname }} to image '{{ image_name }}:{{ image_tag }}'."
              delegate_to: localhost
              become: no
              register: success_email_result
          when: (update_available | default(false)) or not container_info.exists

        - name: "Skip update as container is already using the latest image"
          ansible.builtin.debug:
            msg: "Container '{{ container_name }}' on {{ inventory_hostname }} is already running the latest image. No action taken."
          when: not (update_available | default(false)) and container_info.exists

      rescue:
        - name: "Send update failure e-mail"
          ansible.builtin.mail:
            host: "{{ var_gmail_smtp_server }}"
            port: "{{ var_gmail_smtp_port }}"
            username: "{{ var_gmail_sender }}"
            password: "{{ var_gmail_password }}"
            to: "{{ var_gmail_receiver }}"
            subject: "Portainer Docker update task failed on {{ inventory_hostname }}"
            body: |
              An Ansible task failed while updating container '{{ container_name }}' on host '{{ inventory_hostname }}'.
              Failed Task: {{ ansible_failed_task }}
              Result: {{ ansible_failed_result }}
          delegate_to: localhost
          become: no
          register: failure_email_result

- name: Clean Up Docker Resources
  hosts: all
  become: true

  tasks:
    - name: "Prune unused docker images with notifications"
      block:
        - name: "Remove all unused Docker images (dangling=false)"
          community.docker.docker_prune:
            images: true
            images_filters:
              dangling: false
          register: prune_result

        - name: "Send prune success e--mail"
          ansible.builtin.mail:
            host: "{{ var_gmail_smtp_server }}"
            port: "{{ var_gmail_smtp_port }}"
            username: "{{ var_gmail_sender }}"
            password: "{{ var_gmail_password }}"
            to: "{{ var_gmail_receiver }}"
            subject: "Portainer: Docker images pruned on {{ inventory_hostname }}"
            body: |
              The Ansible playbook successfully pruned unused Docker images on {{ inventory_hostname }}.
              Details: {{ prune_result.stdout | default('No output') }}"
          delegate_to: localhost
          become: no
          register: prune_success_email_result

      rescue:
        - name: "Send prune failure e-mail"
          ansible.builtin.mail:
            host: "{{ var_gmail_smtp_server }}"
            port: "{{ var_gmail_smtp_port }}"
            username: "{{ var_gmail_sender }}"
            password: "{{ var_gmail_password }}"
            to: "{{ var_gmail_receiver }}"
            subject: "Portainer: Docker prune task failed on {{ inventory_hostname }}"
            body: |
              An Ansible task failed during Docker image cleanup on host '{{ inventory_hostname }}'.
              Failed Task: {{ ansible_failed_task }}
              Result: {{ ansible_failed_result }}
          delegate_to: localhost
          become: no
